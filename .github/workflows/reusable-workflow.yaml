name: Reusable Deploy Workflow 1
on:
  workflow_call:
    inputs:
      dockerImage:
        description: 'Docker Image Name'
        type: string
        required: false
      dockerImageVersion:
        description: 'Docker Image Version'
        type: string
        required: true
      deployEnvironment:
        description: 'Deployment Environment'
        type: string
        required: true
   
jobs:
  deployment-information:
    runs-on: ubuntu-latest
    outputs:
      clusters: ${{ steps.information.outputs.clusters }}
      selectedClusters: ${{ steps.information.outputs.selectedClusters }}
    steps:
    - name: Information
      id: information
      uses: actions/github-script@v6
      with:
        #result-encoding: string
        script: |
          console.log(`Workflow Inputs are : ${ JSON.stringify(context?.payload?.inputs, null, 2) }`)
          const selectedEnv = context?.payload?.inputs?.deployEnvironment || 'dev'
          
          const dev=[{ "name" : "dev-np-1" }]
          const preprod=[{ "name" : "pp-np-1" },{ "name" : "pp-np-2" }]
          
          const clusters = []
          dev.forEach((e) => clusters.push(e))
          preprod.forEach((e) => clusters.push(e))
          core.setOutput('clusters', clusters);
          
          const selectedClusters = []
          switch(selectedEnv) {
            case 'dev':
              dev.forEach((e) => selectedClusters.push(e))
              break;
            case 'preprod':
              preprod.forEach((e) => selectedClusters.push(e))
              break;
            default:
              dev.forEach((e) => selectedClusters.push(e))
              preprod.forEach((e) => selectedClusters.push(e))
          }
          core.setOutput('selectedClusters', selectedClusters);
  deploy-env:
    runs-on: ubuntu-latest
    needs: deployment-information
    strategy:
      matrix:
        targetEnv : ${{ fromJson(needs.deployment-information.outputs.clusters) }}
        #targetEnv : ${{ needs.deployment-information.outputs.clusters }}
    steps:
    - name: steps level matrix - ${{ matrix.targetEnv.name }}
      run: echo Target Environment is ${{ matrix.targetEnv }}
      
        
        
               
